-------------------------------------------------------------------------------
-- Dice Master (C) 2017 <The League of Lordaeron> - Moon Guard
-------------------------------------------------------------------------------

--
-- Affix editor interface.
--

local Me = DiceMaster4

local startOffset = 0
local filteredList = nil

Me.unitList = 90652
Me.unitAnim = 0

local filterOptions = {
	["Races"] = {
		["Humans"] = {53840, 53835, 53832, 53828, 53223, 53224, 53040, 53041, 53042, 53043, 24768, 24779, 1860, 1862, 1858, 1855, 1903, 1545, 1489, 1484, 1466, 4679, 4677, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674, 4418, 4420, 4422, 4423, 4419, 4421, 4429, 4430, 4431, 4433, 4272, 2462, 2463, 2464, 2473, 2474, 2475, 2466, 2461, 2460, 2492, 2493, 2496, 2497, 2502, 2501, 2499, 2500, 2505, 2507, 2508, 2506, 2509, 2510, 2518, 2519, 2520, 2523, 2524, 2525, 2563, 2564, 2561, 2562, 2607, 2608, 2603, 7368, 7369, 8778, 8779, 16590, 16596, 16599, 16601, 16607, 16606, 16605, 16603, 16604, 16611, 16612, 16614, 14337, 14338, 14492, 14493, 14531, 14533, 14534, 14535, 14536, 14537, 14538, 14539, 14540, 14582, 14583, 14584, 14694, 14883, 14876, 14890, 73139, 73140, 73143, 73196, 73230, 73225, 73342, 73465, 73466, 73467, 73468, 73522, 73524, 73579, 73582, 73589, 70798, 70807, 70913, 70912, 70949, 70985, 70984, 71014, 71015, 71012, 71013, 71107, 71108, 71241, 71246, 72253, 72412, 72413, 72435, 72436, 72532, 72533, 72581, 72582, 72670, 72671, 72672, 72673, 72674, 72675, 72724, 73090, 73089, 73085, 73086, 73087, 73088, 73084, 73083, 73082, 73081, 73483, 73485, 44861, 44862, 2434, 2435, 2436, 2402, 2404, 2405, 2408, 2409, 2410, 2150, 2151, 2041, 2042, 2043, 2044, 2045, 1984, 1985, 1858, 1860, 1862, 1859, 1865, 1864, 1863, 1861, 1853, 1855, 1856, 1595, 1489, 1469, 1470, 964, 900, 816, 810, 794, 795, 796, 797, 754, 753, 660, 656, 638, 637, 585, 584, 578, 576, 575, 561, 560, 555, 534, 459, 429, 430, 424, 390, 344, 338, 327, 330, 285, 280, 286, 267, 258, 257, 262, 252, 242, 232, 224, 225, 218, 213, 214, 215, 198, 197, 190, 164, 125, 89, 5830, 25545, 25547, 25508, 24659, 24400, 24403, 24059, 24060, 24065, 24064, 56146, 55028, 57003, 33605, 33606, 33607, 33608, 33643, 103, 65199, 28127, 30863, 64712, 47863, 73803, 65834, 78867, 85667, 85668, 85669, 85670, 85758, 86008, 86009, 86010, 86166, 86167, 86165, 86808, 86809, 86989, 86990, 87004, 87007, 87012, 88268, 88267, 87858, 87863, 87868, 82047, 82048, 76855, 76856, 76857, 76858, 76859, 76860, 76861, 76862, 76863, 76864, 76865, 76866, 76867, 76868, 76869, 76870, 76871, 76872, 76873, 76874, 76875, 76876, 76877, 76878, 76879, 76880, 76881, 76883, 76884, 76885, 76886, 76887, 76888, 76889, 76890, },
		["Nightborne Elves"] = {82708, 82709, 70745, 70746, 70747, 70748, 70749, 70750, 70751, 70752, 70753, 70754, 70755, 70756, 70757, 70758, 70759, 70760, 70761, 70762, 70696, 70697, 70698, 70699, 70592, 70583, 70582, 70594, 70561, 70562, 70563, 70564, 70566, 70567, 70568, 70569, 70534, 70333, 70243, 70244, 70245, 70253, 70254, 69761, 69664, 69665, 69666, 69667, 69606, 69607, 69605, 69608, 69609, 69610, 69529, 69530, 69315, 69317, 69318, 69112, 69114, 69116, 69117, 69082, 68963, 68819, 68629, 68378, 68237, 68238, 68239, 73477},
		["Void Elves"] = {82736, 82735, 82885, 82884, 82875, 82867, 82509, 82511, 82400, 82402, 82403, 82404, 82401, 82409, 79981, 79735, 79506, 78869, 83521, 83523, 83524, },
		["Draenei"] = {79994, 79992, 79936, 79937, 79938, 79939, 79940, 79941, 79942, 79943, 79944, 79945, 79789, 79790, 79762, 79732, 79624, 79483, 79263, 79241, 79020, 78867, 78665, 78670, 78675, 78657, 78432, 78433, 78434, 78435, 75584, 75141, 75142, 75143, 75144, 75145, 75146, 75147, 75148, 75149, 75164, 75163, 75162, 75178, 75184, 75183, 75198, 75193, 75199, 75200, 75195, 75208, 75209, 75214, 75215, 75219, 75238, 77772, 77958, 77959, 77960, 77965, 77964, 77963, 77962, 77961, 51714, 51715, 51716, 51717, 58494, 58495, 56591, 56592, 56593, 56588, 56598, 56599, 56600, 56307, 54119, 54073, 54074, 54075, 54076, 51992, 52411, 52409, 52408, 52407, 52435, 52428, 52427, 52508, 52544, 52545, 52549, 52538, 52547, 52551, 52953, 53088, 53136, 53137, 53139, 53140, 53304, 53305, 76336, 76337, 76338, 76339, 76340, 74335, 81114, 80784, 80410, 80396, 80280, 80281, 80282, 80283, 79931, 17583, 17584, 17585, 17588, 17589, 17590, 17598, 17603, 17602, 17599, 17601, 17609, 17619, 17924, 17927, 17913, 17933, 17934, 17939, 17940, 17946, 18077, 18078, 18079, 18080, 18154, 18303, 19144, 19318},
		["Forsaken"] = {6232, 1646, 1645, 1666, 1648, 1647, 1660, 1649, 2637, 3545, 3678, 4156, 22532, 22534, 22535, 22533, 23868, 23877, 23875, 23937, 23938, 23939, 30906, 33054, 15239, 15240, 15241, 15242, 10670, 10671, 10672, 10718, 10719, 10720, 10721, 10723, 10728, 10702, 10690, 10733, 10731, 10750, 10751, 10752, 13807, 13854, 13855, 13856, 15187, 15188, 15189, 15196, 15197, 15207, 15208, 15284, 15286, 15722, 15723, 16237, 16240, 16236, 16239, 16235, 16238, 64711, 64551, 64552, 64553, 64273, 64274, 64275, 66644, 67043, 67146, 67154, 67524, 68085, 68086, 68087, 68088, 68076, 68096, 68097, 68098, 68099, 68131, 68132, 68133, 68134, 68349, 68350, 68351, 68352, 68482, 68558, 29257, 29252, 29754, 30071, 30072, 49143, 39212, 86011, 86014},
		["Dwarves"] = {33234, 33235, 33236, 33238, 33278, 33279, 33280, 33324, 33341, 33507, 33504, 33506, 38074, 38060, 28715, 28716, 28711, 28565, 28564, 28563, 28562, 26353, 26321, 26225, 26212, 26213, 26218, 26220, 26091, 26092, 26093, 26094, 26090, 25986, 25991, 25993, 25988, 25990, 25995, 25845, 25848, 25847, 25846, 25694, 25693, 25695, 16843, 16837, 16933, 16961, 24098, 24097, 24148, 24158, 33093, 33138, 33132, 44863, 61416, 61417, 61509, 61506, 61516, 61532, 61601, 2677, 2678, 2784, 2785, 2786, 2787, 2882, 2889, 2893, 3051, 3053, 3054, 3056, 3057, 3058, 3059, 3060, 3065, 3064, 3063, 3062, 3061, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3080, 3079, 3078, 3077, 3076, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3095, 3094, 3093, 3092, 3091, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3396, 3397, 3398, 3399, 3400, 3405, 3401, 3406, 3407, 3408, 3409, 3410, 3415, 3414, 3413, 3412, 3411, 3524, 3525, 3526, 3527, 3594, 3595, 3596, 3597, 3598, 3599, 3600, 3761, 3762, 3763, 3764, 3765, 3766, 5043, 5044, 5041, 16354, 16367, 16366, 16378, 16379, 16380, 16107, 16108, 15981, 15849, 15850, 15847, 15848, 15845, 15835, 15836, 15837, 15746, 15747, 15643, 15632, 15637, 15636, 15641, 15630, 15625, 15626, 15622, 15617, 15616, 15553, 14878, 14405, 14404, 14347, 14346, 13849, 13785, 13786, 13787, 13788, 13789, 13790, 13791, 13792, 13796, 13797, 13798, 13799, 13800, 13801, 13802, 13803, 13804, 13805, 13806, 13654, 13655, 13651, 13650, 13658, 13659, 13640, 13632, 13633, 13532, 13536, 13543, 13545, 33140, 32680, 35387, 32681, 2784, 2785, 2786, 2787, 30753, 30754, 30755, 30736, 86821, 86822, 86825, 86828, 86824, 86823, 86826, 86827, 86829, 86830, 86832, 86831, 86085, 86086, 85759, 85760, 85762, 85763, 85726, 85727, 84899, 84900, 78306, 78307, 78308, 78309, 85768, 85769, 86319, 86320, 86521, 87221, 87222, 87459, 87554, 87555, 87557, 87621, 87644, 87716, 87726, 85395},
		["Blood Elves"] = {17257, 17258, 17259, 17260, 17261, 17264, 17265, 17266, 17267, 17268, 17361, 17363, 17364, 17365, 17362, 17358, 17357, 17356, 17359, 17360, 17354, 17351, 17352, 17353, 17355, 17348, 17349, 17350, 17366, 17367, 17368, 17376, 17380, 17381, 17784, 17785, 17773, 17774, 17775, 17780, 17779, 17778, 17777, 17776, 17892, 17893, 17894, 17895, 17916, 17917, 17918, 18106, 18102, 18196, 18197, 18198, 18199, 18200, 18201, 18202, 18203, 18205, 18206, 18207, 18208, 18212, 18211, 18218, 18217, 18219, 18258, 18259, 18260, 16676, 16677, 16678, 16679, 16680, 16675, 16685, 16684, 16683, 16682, 16681, 16686, 16687, 16688, 16689, 16690, 16691, 16692, 16693, 16694, 16695, 16696, 16697, 16698, 16699, 16700, 16701, 16702, 16703, 16704, 16705, 16706, 16707, 16708, 16709, 16710, 16712, 16713, 16714, 16715, 16716, 16717, 16718, 16719, 16720, 16725, 16722, 16732, 16733, 16734, 16735, 17115, 17116, 19300, 19301, 19296, 19298, 19299, 19287, 19288, 19285, 19201, 19448, 19449, 19450, 19451, 19452, 19453, 19474, 19475, 19503, 19504, 19506, 19507, 19505, 19515, 19516, 19517, 19518, 19572, 19573, 19574, 19576, 19577, 19578, 19596, 19708, 19706, 19707, 19833, 19834, 19827, 19835, 19831, 19832, 19829, 19830, 19825, 19826, 19821, 19822, 19840, 19837, 19836, 20023, 20026, 20027, 20029, 19314, 19315, 21331, 21332, 21333, 21334, 21416, 21417, 21418, 21419, 21420, 21463, 21464, 21465, 21466, 21467, 21468, 21469, 21470, 21504, 21505, 21508, 21509, 21510, 21560, 21558, 21559, 21557, 21561, 21562, 21563, 21564, 21565, 21566, 21567, 21568, 21569, 21570, 21571, 21572, 24066, 24143, 54634, 16869, 16865, 15934, 16124, 26067, 26068, 26069, 26070, 26071, 26072, 26073, 26074, 26187, 26188, 26365, 26501, 26877, 26878, 26879, 26880, 26593, 26885, 26886, 26887, 26888, 26889, 26890, 26891, 26892, 26895, 26896, 26897, 26898, 26899, 26900, 26908, 26911, 26907, 26909, 26910, 27452, 27556, 27557, 27559, 27560, 27603, 27604, 27607, 27608, 27613, 27612, 27614, 27615, 27644, 27645, 27776, 27772, 27800, 27801, 27924, 27930, 27931, 27946, 27949, 28017, 28168, 28169, 28156, 28153, 28152, 28151, 28148, 28147, 28174, 28176, 28178, 28198, 28222, 28305, 28737, 28738, 28740, 28754, 28755, 28756, 28757, 28758, 28759, 28772, 28771, 28770, 29052, 29091, 29262, 29483, 29484, 29477, 29478, 29475, 29479, 29500, 29501, 29518, 29519, 29611, 29653, 29654, 29655, 29692, 29693, 29690, 29691, 29720, 29721, 29785, 29789, 29832, 29831, 29829, 29830, 29853, 29850, 29851, 29852, 29854, 29857, 29856, 29855, 29866, 29867, 29868, 29869, 29865, 29864, 29871, 29872, 29873, 29988, 30195, 30196, 30259, 30260, 30311, 30310, 30438, 30439, 30590, 30591, 30592, 30581, 30628, 30629, 30630, 30631, 30793, 30797, 30838, 30841, 30842, 30979, 31033, 31034, 31035, 31032, 31036, 31037, 31038, 31023, 31024, 31025, 31026, 31028, 31029, 31030, 31031, 31172, 31173, 31170, 39265, 39262, 85525, 85526, 85924, 85944, 85945, 86012,},
		["Trolls"] = {47261, 47262, 47263, 47264, 47265, 47331, 47332, 47333, 47334, 47335, 47336, 47337, 47338, 47344, 47345, 47352, 47353, 47378, 47379, 47442, 47443, 47444, 47445, 47446, 47447, 47448, 47449, 47450, 47477, 47478, 47479, 47489, 47480, 47482, 47505, 47506, 47510, 47559, 47560, 47561, 47562, 47556, 47557, 47558, 47595, 47765, 47766, 47767, 47769, 47770, 47771, 47772, 47773, 47775, 47781, 47782, 47783, 47784, 47823, 47825, 47826, 47827, 47828, 48055, 48056, 48057, 48064, 48067, 48069, 48072, 48074, 48076, 48077, 48103, 48104, 48135, 48181, 48211, 48212, 48213, 47229, 47230, 47182, 47183, 47184, 47185, 30760, 30761, 30762, 30763, 30921, 30922, 30923, 30924, 30925, 30926, 30927, 30928, 30929, 30930, 30931, 30932, 30933, 30934, 30935, 30936, 30937, 30938, 30939, 30940, 30945, 30944, 30943, 30942, 30941, 30946, 30947, 30948, 30949, 30950, 30951, 30952, 30953, 30954, 30955, 30956, 30957, 30958, 30959, 30960, 195, 298, 299, 316, 337, 590, 591, 592, 593, 636, 14052, 14053, 14054, 14055, 14056, 14057, 14058, 14059, 14060, 14061, 14062, 14063, 14064, 14021, 14022, 14023, 14024, 14026, 14027, 14028, 14029, 14031, 14032, 14033, 14034, 14035, 14036, 14037, 12035, 12037, 12038, 12039, 12041, 11761, 11762, 11763, 11764, 11765, 11632, 11315, 11316, 11317, 11318, 11319, 11311, 11312, 11313, 11314, 9709, 9710, 9711, 9712, 9721, 9722, 9719, 9720, 9728, 9729, 9730, 9731, 9732, 9733, 4806, 4769, 4770, 4771, 4772, 4773, 4774, 4776, 4777, 4778, 4779, 4780, 4781, 4782, 4572, 4573, 4574, 4575, 4580, 4581, 4570, 21630, 21631, 21632, 21633, 22268, 22269, 22271, 22272, 22273, 22274, 22275, 22276, 22277, 22278, 22301, 22302, 22303, 22304, 22305, 22306, 22307, 22308, 22309, 22310, 22313, 22314, 22315, 22332, 22353, 22462, 22463, 22464, 22465, 26352, 26354, 26421, 26422, 26431, 26432, 26434, 26435, 26584, 26585, 26586, 26589, 26923, 26924, 27046, 27047, 27048, 27049, 27050, 27051, 27056, 27057, 27058, 27059, 27054, 27061, 27075, 27076, 27083, 27084, 27090, 27086, 27088, 27140, 27252, 27334, 27361, 27362, 27363, 27448, 27453, 27455, 6858, 6850, 6468, 6469, 6471, 6472, 6473, 6421, 6422, 6423, 6424, 6419, 6420, 6417, 6418, 6411, 6412, 6413, 6414, 6415, 6416, 6427, 6428, 6425, 6426, 6429, 6430, 6434, 6436, 6437, 6439, 6440, 6441, 33655, 33656, 33657, 33658, 33659, 33665, 33666, 33667, 33668, 33669, 80834, 80835, 80836, 87055,},
		["Night Elves"] = {3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 4168, 4169, 4170, 4172, 4173, 4166, 4181, 4182, 4183, 4180, 4232, 4233, 4234, 4235, 4841, 4842, 4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4852, 4929, 28369, 28373, 28392, 28394, 28415, 28416, 28422, 28423, 28472, 28473, 28484, 28485, 28486, 28487, 28532, 28535, 28537, 28570, 28627, 28635, 28724, 28866, 28869, 28872, 28878, 28959, 28955, 29084, 29124, 29125, 29126, 29174, 29175, 29176, 29256, 29294, 29295, 29296, 29328, 6352, 6080, 6079, 6248, 6444, 6448, 14329, 14330, 14331, 14332, 14333, 14383, 14397, 14398, 14399, 14400, 14417, 14418, 14419, 14425, 14567, 14572, 14632, 14884, 15225, 15255, 15256, 15257, 15258, 73134, 73135, 73117, 73118, 73119, 73120, 73122, 73123, 73124, 73125, 73036, 73037, 73038, 73039, 73005, 72941, 72905, 72904, 72874, 72695, 72696, 72697, 72698, 72699, 72347, 72348, 72032, 72033, 72019, 71838, 71717, 71689, 71642, 71545, 70942, 70898, 70899, 70900, 70670, 70673, 70674, 70676, 70677, 70552, 70203, 70214, 69673, 69630, 69631, 69498, 69500, 69476, 69477, 69462, 69463, 69379, 69383, 69128, 68671, 68670, 68610, 67513, 67451, 67452, 67059, 67060, 67069, 67070, 67068, 67083, 67084, 67085, 67090, 67089, 67088, 67016, 66775, 66776, 66777, 66778, 66779, 66780, 66781, 66782, 66783, 66784, 66785, 66786, 66787, 66788, 66789, 66790, 66791, 66792, 66793, 66794, 66795, 66796, 66797, 66682, 66685, 66686, 66687, 66688, 66696, 66697, 66698, 66699, 66704, 66705, 66706, 66707, 66716, 66717, 66718, 66719, 66720, 66721, 66722, 66723, 66620, 66621, 66622, 66623, 66356, 66357, 66014, 66018, 65938, 65309, 65312, 64809, 40057, 39690, 39689, 39620, 39539, 39183, 39162, 39153, 39128, 39127, 38970, 38969, 38968, 38905, 38904, 38897, 38896, 38864, 38865, 38867, 38866, 38823, 38824, 38788, 38743, 38744, 38747, 38704, 38652, 38559, 38558, 38542, 38541, 38540, 38504, 38503, 38501, 38500, 38446, 38435, 38436, 38437, 38438, 38439, 38441, 38442, 38417, 38267, 38265, 38250, 38208, 38083, 38088, 38062, 38014, 37948, 37949, 37950, 37163, 37164, 37165, 37166, 10889, 10890, 10891, 10892, 29405, 29406, 29407, 29408, 29413, 29414, 29414, 29415, 29416, 29417},
		["Worgen"] = {36795, 36796, 36798, 36799, 36800, 36801, 36802, 36803, 36848, 36849, 36850, 36851, 36862, 36867, 37101, 37102, 37103, 37104, 37105, 37106, 37107, 37108, 37110, 37109, 37111, 37112, 37113, 37114, 37115, 37116, 37117, 37118, 37119, 37120, 37121, 37122, 37123, 37124, 37163, 37164, 37165, 37166, 37173, 37378, 37379, 37389, 37390, 37392, 37393, 37394, 37395, 37441, 37442, 37443, 37444, 37445, 37446, 37447, 37448, 37449, 37498, 37499, 37500, 37542, 37543, 37572, 37727, 37729, 37994, 37995, 37996, 37997, 37998, 37999, 38052, 35468, 35469, 35868, 36184, 36186, 36187, 36188, 73172, 73173, 73174, 73175, 73176, 73177, 73178, 73179, 73180, 66682, 66683, 66685, 66686, 66687, 66688, 66693, 66696, 66697, 66698, 66699, 66704, 66705, 66706, 66707, 66716, 66717, 66718, 66719, 66720, 66721, 66722, 66723, 66775, 66776, 66777, 66778, 66779, 66780, 66781, 66782, 66783, 66784, 66785, 66786, 66787, 66788, 66789, 66790, 66791, 66792, 66793, 66794, 66795, 66796, 66797, 67825, 67826, 67827, 67828, 67829, 67830, 67833, 67834, 67835, 67836, 67837, 67838, 67839, 67840, 67841, 67842, 67843, 67844, 67851, 67852, 67853, 67854, 67859, 67860, 67861, 67862, 67863, 67864, 67865, 67866, 67871, 67872, 67874, 67875, 67876, 67877, 67878, 33650, 33651, 33652, 33653, 33654, 33660, 33661, 33662, 33663, 33664, 86009},
		["Gnomes"] = {3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3124, 3125, 6967, 6968, 6973, 6974, 6975, 6977, 6978, 6980, 6981, 30118, 31020, 31022, 31624, 31623, 31635, 31649, 31654, 31650, 31651, 31652, 31653, 31655, 31656, 31657, 31659, 31658, 31664, 31665, 31663, 31670, 31677, 31678, 31679, 31680, 31681, 31682, 31683, 31684, 31692, 31713, 31735, 31883, 31884, 31885, 31886, 31932, 31933, 31934, 31935, 32136, 32137, 32138, 32139, 32144, 32145, 72540, 72541, 72478, 72479, 72420, 72421, 72357, 72358, 72340, 72339, 72334, 72227, 72228, 72229, 72230, 72231, 72232, 72233, 72234, 71993, 71935, 71857, 71855, 71628, 71610, 30664, 30665, 30633, 30610, 30611, 30571, 30469, 30470, 30473, 30378, 62231, 62232, 62243, 62516, 77873, 77874, 77908, 78083, 78084, 78122, 78121, 78231, 78232, 78234, 78235, 78236, 3583, 3584, 3587, 3588, 3568, 3569, 3561, 3562, 5376, 5377, 5378, 33087, 33230, 33231, 33232, 33233, 33674, 33676, 33858, 34414, 34707, 34708, 34709, 34710, 34753, 34832, 34833, 34834, 35157, 23953, 23955, 23957, 24013, 24061, 24103, 24104, 24105, 24106, 24107, 24108, 24109, 24111, 24112, 24113, 24114, 24115, 24116, 24117, 24118, 24119, 24120, 24121, 24122, 24123, 24624, 24947, 24975, 25035, 25046, 25205, 25289, 25344, 25407, 25477, 25524, 25618, 25619, 25791, 28572, 28573, 28574, 72873, 86774, 88519, },
		["Goblins"] = {23659, 7155, 7156, 7157, 7162, 7164, 7168, 7167, 7175, 7208, 35444, 35389, 35390, 26248, 26249, 26558, 26808, 26807, 28026, 28028, 28031, 28033, 30781, 30782, 30783, 30784, 32883, 32121, 32122, 32123, 31782, 31758, 33313, 33708, 33713, 26463, 26464, 26465, 75670, 75730, 75741, 23764, 23758, 23762, 23765, 23760, 24029, 24028, 24030, 24031, 24032, 24033, 24034, 24035, 24036, 49298, 49252, 49270, 49025, 48956, 48825, 48539, 48540, 48544, 48545, 48546, 48547, 48272, 48193, 48194, 48195, 48196, 49329, 54572, 54574, 55161, 55267, 55266, 55584, 55660, 55665, 56079, 56422, 56590, 56931, 57034, 57043, 57070, 57072, 57078, 57083, 57084, 87189, 80510, 80511, 80512, 80513, 80615, 81960, 81961, 81962, 82344, 88089, 88062, },
		["Orcs"] = {59627, 59631, 1312, 1313, 1311, 1319, 1320, 1321, 1318, 1327, 1326, 1334, 1333, 1358, 1359, 1366, 1367, 5846, 6031, 6032, 6034, 6038, 6037, 6030, 6043, 6044, 6045, 6047, 6048, 6049, 6050, 10589, 10696, 10697, 15243, 15244, 15248, 15249, 15548, 15572, 15573, 24675, 24676, 24677, 24678, 24679, 24683, 24640, 24645, 24643, 24647, 31724, 31698, 31661, 31662, 33778, 17183, 17184, 17185, 17189, 17151, 17152, 17147, 17148, 17145, 17150, 17154, 17153, 17137, 17117, 17043, 17044, 17049, 17051, 17699, 17700, 17701, 17719, 17720, 17721, 17722, 52925, 52909, 52910, 52870, 52874, 52876, 52878, 52552, 52553, 52554, 52555, 52200, 51814, 51518, 51520, 51398, 51397, 51400, 51362, 51364, 51351, 51350, 51338, 51337, 51190, 50773, 50774, 50471, 50470, 50358, 50232, 50153, 50154, 50156, 50157, 50158, 62388, 62389, 34098, 34099, 38988, 39526, 32177, 32178, 32182, 31102, 30756, 30757, 30758, 30759, 59902, 59628, 59630, 59632, 59634, 59635, 59636, 58352, 86015, 86671, 86672, 86673, 86677, 86683, 86684, 86686, 86687, 87970, },
		["Mag'har Orcs"] = {17527, 17452, 17453, 17466, 17467, 17468, 17465, 17462, 17664, 17665, 17668, 17666, 17667, 86324, 86325, 86326, 86327, 86328, 86329, 86330, 86331, 86332, 86333, 86334, 86335, 86336, 86337, 86338, 86339, 86340, 86341, 86342, 86343, 86437, 86438, 86439, 86440, 86807, 52942, 52940, 52944, 52939, 52938, 52905, 52906, 52907, 52875, 52877, 52851, 52847, 52557, 52558, 52556, 52534, 52535, 52273, 52274, 52275, 52233, 52210, 52211, 52201, 52202, 52203, 52204, 52164, 52165, 52166, 52167, 52168, 52169, 52170, 52100, 52099, 52103, 52104, 52077, 52078, 52058, 52056, 52050, 52055, 52036, 52025, 52026, 52000, 51999, 51823, 51784, 51761, 51763, 51767, 51768, 51770, 51771, 51772, 51757, 51759, 51744, 51745, 51643, 51612, 51367, 51369, 51312, 51313, 51061, 49585, 49585, 62365, 62366, 62403, 62398, 62424, 62458, 57362, 57363, 57366, 57367, 57368, 57369, 57353, 57293, 56738, 56739, 56740, 56274, 56135, 56136, 56133, 56134, 55792, 55795, 55793, 55694, 55693, 55661, 55662, 55324, 54674, 54731, 54732, 54900, 54901, 54902, 59638, 59561, 59562, 59563, 59549, 59438, 59443, 59441, 59444, 58912, 58888, 58887, 58885, 58762, 58764, 88421, 88423,},
		["Pandaren"] = {40771, 40772, 40773, 40770, 40793, 40794, 40795, 40796, 40797, 40813, 40814, 40817, 40828, 40829, 40830, 40888, 40893, 40923, 40922, 40919, 40927, 40962, 40965, 40966, 41143, 41133, 41159, 41160, 41217, 41218, 41241, 41269, 41274, 41275, 41412, 41415, 41668, 41669, 41670, 41671, 41700, 41777, 41796, 41797, 41799, 41804, 41802, 41814, 41815, 41821, 41827, 41869, 41873, 41903, 39035, 38459, 46515, 46091, 46092, 46093, 45273, 44872, 44873, 44814, 44789, 44514},
		["Kul Tiran Humans"] = {87026, 87027, 87028, 87029, 87030, 87031, 87049, 87063, 88679, 88680, 88681, 88682, 88676, 88675, 88677, 88678, 88662, 88663, 88660, 88661, 88653, 88625, 88630, 88621, 88626, 88616, 88611, 88612, 88607, 88608, 88613, 88614, 88609, 88610, 88615, 88606, 88604, 88605, 88588, 88589, 88590, 88591, 88586, 88574, 88575, 88523, 88512, 88513, 88511, 88510, 88505, 88496, 88497, 88498, 88499, 88500, 88502, 88503, 88506, 88489, 88488, 88495, 88457, 88458, 88459, 88433, 88360, 88362, 88348, 88302, 88303, 88304, 88305, 88263, 88248, 88249, 88250, 88247, 88239, 88240, 88237, 88238, 88192, 88193, 88194, 88195, 88189, 88190, 88185, 88175, 88167, 88162, 88163, 88161, 88165, 88151, 88152, 88153, 88154, 88155, 88156, 88127, 88128, 88129, 88130, 87947, 87948, 87823, 87814, 87815, 87817, 87803, 87802, 87805, 87791, 87793, 87782, 87769, 87628, 87612, 87494, 87493, 87492, 76291, 76135, 87893, 81606, 81602, 81604, 81608, 81607, 85348, 85368, 85368, 85369, 85527, 85536, 85636, 85637, 85638, 85639, 85640, 85641, 85642, 85643, 85655, 85656, 85666, 85823, 85826, 86456, 86457, 86707, 86708, 86709, 86710, 86819, 86849, 86854, 86857, 86963, 86967, 86971, 86972, 84382, 79859, 80045, 80841, 80996, 81507, 81508, 76515, 76516, 76517, 76518, 76519, 76546, 76547, 76548, 76549, 76550, 76551, 76552, 77036, 77037, 77038, 77039, 77040, 77041, 77042, 77043, 77044, 77045, 77046, 77047, 77048, 77049, 77050, 77051, 77052, 77053, 77054, 77055, 77056, 83664, 83665, 83666,},
		["Zandalari Trolls"] = {86569, 86571, 86574, 86587, 86588, 86589, 86590, 86594, 86595, 47860, 47620, 47621, 47622, 47623, 47624, 47625, 47637, 47380, 47389, 47395, 47392, 47402, 47400, 47412, 47411, 47413, 47419, 47422, 47433, 47432, 47429, 47438, 47439, 47440, 47356, 47357, 47358, 47359, 47363, 47372, 47373, 47271, 47272, 47273, 47274, 47275, 47299, 47301, 47304, 47313, 47326, 47327, 47328, 47329, 47330, 47255, 47256, 47257, 47253, 47248, 47249, 47259, 47260, 47258, 47266, 47267, 79819, 80026, 80047, 80063, 80064, 80065, 80080, 80186, 80187, 80188, 80189, 80293, 80294, 80311, 80323, 80347, 80348, 80358, 80369, 80375, 80376, 80377, 80686, 80726, 80727, 80742, 80759, 80853, 80958, 81111, 81209, 81210, 81211, 81212, 81213, 81214, 81215, 81216, 81217, 81218, 81219, 81220, 81221, 81222, 81223, 81239, 81330, 81325, 81367, 81384, 81438, 81643, 81738, 81730, 81731, 81732, 81733, 81734, 81735, 81736, 81737, 81956, 81979, 81981, 81982, 82078, 82079, 82081, 82107, 82130, 82576, 82577, 82578, 87911, 87681, 86799, 86800, 86801, 86802, 86790, 86791, 86792, 86793, 75898, 76066, 76765, 76848, 76849, 76850, 76851, 77184, 77185, 77186, 77187, 77188, 77189, 77193, 77638, 78603, 79401, 79411, 79412, 79568, 84052, 84053, 84054, 84126, 84269, 84680, 84933, 84934, 84987, 85789, 85905, 85906},
		["Dark Iron Dwarves"] = {3451, 3452, 3456, 3488, 3490, 3487, 3902, 3903, 3906, 3908, 3909, 3912, 3911, 3927, 3954, 3969, 3970, 4218, 4222, 4229, 4225, 4224, 4932, 4933, 4934, 4935, 4936, 4937, 4938,87777, 87422, 14654, 14653, 14655, 14670, 14669, 14672, 14671, 14666, 14663, 14665, 14656, 86432, 86433, 86434, 86435, 85993, 85994, 85995, 85996, 85997, 85722, 85249, 85247, 84508, 84466, 84467, 86565, 87912, 87992, 87993, 88363, 88409, 88408, 88423, 88424, 88439, 88440, 88452, 85394, 85690, 85691,},
	},
	["Creatures"] = {
		["Undead"] = {31119, 31093, 31092, 31047, 31005, 31008, 30993, 30966, 30919, 30902, 30893, 30868, 30857, 30843, 30826, 30800, 30721, 30656, 30651, 30653, 30654, 30647, 30648, 30649, 30655, 30646, 30643, 30644, 30640, 30617, 30520, 30507, 30403, 30362, 30347, 30343, 30283, 29842, 29794, 29557, 28730, 28672, 28292, 27979, 27856, 27806, 27805, 27773, 27775, 27755, 27706, 27705, 27707, 27671, 27652, 27654, 27646, 27579, 27555, 27545, 27542, 27480, 27426, 27407, 27394, 27395, 27338, 27339, 26946, 26579, 26393, 26209, 26210, 26207, 26096, 26003, 25742, 25730, 25678, 25528, 25527, 25526, 25511, 25468, 25467, 25351, 25282, 25281, 25278, 25280, 25279, 25254, 25214, 25199, 24991, 24992, 24993, 24994, 24995, 24793, 24804, 24834, 24823, 24800, 24794, 24802, 24787, 24751, 24565, 24495, 23881, 23882, 23883, 23299, 23137, 23138, 23142, 23141, 70768, 70772, 70781, 70782, 10690, 10702, 10729, 11071, 11078, 11129, 11126, 11132, 11135, 11131, 11133, 11134, 11145, 11146, 11147, 11148, 11149, 11150, 11155, 11154, 11153, 11152, 11151, 11175, 11177, 11405, 11404, 11403, 11401, 11400, 12073, 14365, 14366, 14368, 14705, 14710, 14709, 16326, 83705,},
		["Demons"] = {77748, 77887, 78004, 78005, 78012, 78032, 78091, 78138, 78139, 78140, 78136, 78137, 78146, 78156, 78176, 66065, 66039, 66036, 66014, 66018, 66015, 66003, 65948, 65939, 65935, 65926, 65924, 65923, 65922, 65921, 65920, 65919, 65918, 65913, 65908, 65903, 65898, 65893, 65766, 65688, 65648, 65647, 65646, 65534, 65524, 65514, 65266, 65210, 65211, 65156, 65157, 65111, 65112, 65113, 65072, 65038, 64950, 64821, 64822, 64823, 64805, 64804, 64807, 64806, 64802, 64753, 64754, 64755, 64713, 64698, 64693, 64585, 64582, 64523, 64525, 64484, 64485, 64480, 64482, 64476, 64423, 64393, 64364, 64358, 64293, 64177, 64169, 64135, 64013, 64002, 63994, 64006, 63990, 63814, 63524, 63525, 63526, 63229, 63099, 62785, 19189, 19190, 19199, 19215, 19254, 19293, 19358, 19586, 19587, 19589, 19597, 19599, 19611, 19616, 19618, 19621, 19718, 19719, 19725, 19722, 19738, 19888, 19877, 19878, 19912, 19914, 19947, 19982, 20103, 20125, 20214, 20531, 20645, 21069, 21104, 21135, 21145, 21262, 21381, 80144, 80120, 80099, 80071, 79875, 79865, 79844, 79833, 79796, 79797, 79747, 79746, 79749, 79744, 79751, 79750, 79724, 79688, 79678, 79690, 79616, 79610, 79515, 79480, 79479, 79389, 79307, 79308, 79261, 79024, 78615, 78505, 78506, 78507, 77398, 77390, 73033, 85160, 76264, 76327, 76711, 76712, 76713, 76714, },
		["Elementals"] = {33330, 33331, 33332, 33339, 33329, 33402, 33427, 33422, 33498, 33692, 33693, 33694, 33727, 33730, 33766, 33767, 33768, 33845, 34060, 34067, 34068, 34069, 34129, 34128, 34201, 34249, 34254, 34255, 34260, 34264, 34256, 34269, 34270, 34271, 34272, 34273, 34275, 35372, 35371, 35315, 35316, 35297, 35252, 35234, 35233, 35232, 35231, 35204, 35203, 35202, 35201, 35168, 35169, 35170, 35171, 35172, 35174, 35173, 35080, 35075, 35064, 35065, 35043, 35044, 35002, 35001, 35000, 34999, 34998, 34910, 34821, 34822, 34823, 34824, 34825, 34782, 34671, 34542, 34543, 34544, 34545, 34546, 34447, 34320, 44849, 44854, 44858, 56515, 56517, 56512, 56499, 56489, 56475, 56476, 56433, 56428, 56427, 56423, 56424, 56425, 56365, 56353, 58973, 58947, 73019, 73020, 73017, 73005, 66141, 66155, 61338, 61272, 59017, 59008, 59050, 59053, 59074, 59070, 59163, 59409, 59410, 59411, 59508, 59509, 59512, 59652, 59648, 59715, 59717, 59719, 59758, 59767, 59768, 59799, 59802, 59877, 59885, 66001, 65963, 65938, 65821, 65813, 65783, 65700, 65538, 65525, 65519, 65520, 65511, 65155, 65102, 65064, 64778, 64757, 64705, 64624, 64611, 64607, 64608, 64606, 64165, 64163, 64053, 73206, 9490, 19006, 19009, 19010, 19011, 19012, 19020, 19071, 19073, 19074, 19075, 19324, 19325, 28379, 28133, 37746, 37714, 37541, 37307, 37163, 37164, 37165, 37166, 37154, 21302, 32913, 33051, 32723, 32724, 32726, 32633, 32373, 32376, 32081, 32054, 31937, 31908, 31898, 72862, 72461, 72139, 40078, 40079, 40080, 40081, 40082, 40083, 40084, 40085, 39915, 39569, 39571, 39572, 39517, 39423, 39433, 39434, 39411, 39407, 39140, 39011, 39013, 39015, 38850, 38852, 38798, 38793, 38783, 38784, 38785, 38778, 38764, 38761, 38779, 38780, 38759, 38760, 38750, 38751, 38752, 38753, 38747, 38706, 38705, 38676, 38659, 38660, 38653, 38654, 38627, 38625, 38594, 38565, 38566, 38567, 38568, 38569, 38570, 38549, 38535, 38532, 38514, 38494, 38495, 38483, 38479, 38480, 38448, 38444, 38429, 38417, 38415, 38389, 38329, 38305, 38267, 38262, 38242, 38208, 38186, 38187, 38188, 38189, 38149, 38064, 38059, 23355, 5229, 5234, 28375, 26298, 26302, 26418, 26419, 26509, 26513, 26514, 26515, 26517, 26518, 26519, 26521, 26647, 26648, 26649, 26650, 26833, 27450, 27443, 27469, 27470, 27471, 27472, 27609, 27688, 15588, 15587, 15485, 68903, 68905, 68904, 68963, 68985, 69128, 69207, 69309, 69474, 69671, 69673, 69717, 71137, 70822, 70823, 70824, 70825, 150, 358, 360, 473, 860, 864, 1455, 1461, 86975, 86976, 86977, 86978, 86979, 86980, 86981, 86982, 86983, 86984, 86985, 86986, 86987, },
		["Dragonkin"] = {33097, 33176, 9489, 9231, 37786, 37670, 37371, 37303, 37231, 37149, 36805, 36712, 36713, 36714, 36705, 36704, 36727, 36633, 36562, 36495, 36496, 36457, 40029, 40019, 40060, 40057, 40056, 40055, 40049, 39797, 39789, 39691, 39686, 39687, 39688, 39580, 39561, 39562, 39563, 39564, 39566, 39543, 39533, 39524, 39494, 39492, 39377, 39378, 39343, 39344, 39345, 39346, 39323, 39322, 39229, 39110, 39112, 39099, 38931, 35437, 35435, 35553, 35551, 35580, 35676, 35740, 35750, 35751, 35754, 35755, 35757, 35862, 40257, 40258, 40259, 40260, 40590, 40793, 40794, 40795, 40796, 40797, 65119, 65120, 65121, 65122, 64232, 61840, 61841, 61848, 62147, 62364, 62412, 62507, 62515, 62545, 62546, 62547, 62548, 70609, 70591, 70402, 70361, 69898, 69714, 69512, 69513, 69457, 69327, 69096, 68633, 68191, 68197, 68198, 68199, 68200, 68202, 68211, 68212, 68213, 68058, 18944, 21446, 21520, 21521, 21522, 21523, 21524, 21525, 21548, 30362, 30175, 29794, 29539, 28953, 28954, 28662, 28666, 28667, 28457, 28456, 28040, 28041, 28042, 28043, 28044, 28045, 28053, 27971, 27981, 73528},
		["Beasts"] = {229, 235, 236, 237, 238, 295, 320, 322, 328, 321, 447, 599, 616, 649, 654, 11908, 12149, 12150, 12151, 12154, 12155, 12156, 12158, 12159, 12157, 12192, 12193, 12196, 12240, 12241, 12242, 12244, 12338, 12339, 12340, 21297, 21240, 21241, 21242, 21192, 37783, 37784, 37799, 37748, 37737, 37728, 37729, 37727, 37712, 37707, 37709, 37710, 37687, 37637, 37622, 37573, 37569, 37570, 37567, 37568, 37558, 37550, 37551, 37552, 37526, 37527, 37492, 37493, 37496, 28066, 28005, 27969, 27881, 27882, 27883, 27761, 27680, 27681, 27682, 21304, 25867, 25868, 25869, 25861, 25856, 25858, 25733, 25679, 25630, 25571, 25573, 25574, 25449, 25450, 25451, 75465, 66064, 66063, 66073, 9535, 9563, 9567, 9568, 9949, 9954, 9958, 9956, 9992, 9989, 10000, 10001, 10002, 10015, 10033, 10054, 10090, 10618, 10807, 10824, 10825, 10828, 10889, 10890, 10891, 10892, 10897, 10898, 10902, 10903, 10947, 10943, 10944, 10945, 10957, 10990, 11315, 11316, 11317, 11318, 11319, 28397, 28401, 28647, 28648, 28653, 28866, 28869, 28872, 28991, 29028, 29029, 29251, 29254, 29256, 29258, 29259, 29260, 29261, 29262, 29271, 29283, 29284, 29310, 29311, 29312, 29313, 29316, 29362, 29363, 29361, 58974, 58975, 58976, 58832, 58833, 58834, 58766, 58767, 58768, 58744, 58745, 58746, 58747, 58748, 58712, 58717, 58723, 58713, 58611, 58612, 58613, 58614, 58615, 58382, 47235, 47236, 47237, 47234, 47233, 47248, 47249, 47244, 47256, 47258, 47259, 47260, 47257, 47274, 47275, 47276, 47277, 47278, 47271, 47272, 47273, 47299, 47303, 47308, 47313, 47326, 47339, 47340, 47341, 47342, 47461, 47469, 47474, 47499, 23793, 23893, 23900, 23946, 23952, 21597, 21598, 21599, 21600, 21601, 21907, 22089, 22131, 66004, 65981, 65982, 65853, 65857, 65861, 65824, 65800, 65503, 65504, 65506, 65505, 65493, 65263, 65258, 65222, 65217, 65221, 65149, 65128, 65133, 65125, 65071, 65050, 65051, 65052, 65027, 64984, 64922, 64923, 64924, 64925, 64583, 64515, 64513, 64510, 64517, 64518, 64519, 64466, 64435, 64428, 64353, 64354, 64304, 64300, 64132, 64118, 37800, 37814, 16571, 16143, 15903, 15904, 15506, 15361},
		["Aberrations"] = {34434, 39248, 39249, 39250, 39251, 39252, 39268, 39269, 39379, 39408, 39444, 39507, 29196, 29197, 29150, 29152, 28951, 28817, 28615, 28614, 28548, 31671, 31672, 34821, 34822, 34823, 34824, 34528, 33565, 33322, 18953, 18954, 18886, 18887, 18685, 18170, 75478, 75479, 75480, 75481, 75493, 75530, 75952, 76100, 76239, 76329, 76353, 76423, 76431, 76471, 76513, 76542, 76601, 76614, 76647, 76771, 76769, 76899, 77177, 41964, 41966, 41851, 49351, 49352, 49371, 49360, 49316, 49124, 49098, 48940, 48743, 48705, 48704, 85426, 85427, 85429, 85430, 85567, 85810, 85919, 85920, 85921, 85922, 85923, 85925, 85926, 86549, 86550, 86551, 86552, 88063, 87365, 87366, 87367, 83793, 83794, 83775, 84021, 84331, 84348, 84376, 84473, 84871, 85051, 85052, 85053, 85054, 85055, 85056, 85057, 85058, 85116, 85180, 85193, 85200, 86450, 86567, },
		["Drust"] = {84799, 85176, 85177, 85178, 85226, 85234, 85383, 85415, 85443, 85444, 85445, 85451, 85560, 85552, 85568, 85571, 85626, 85761, 85882, 85883, 85884, 85885, 86194, 86524, 86785, 86786, 86787, 86788, 86803, 86804, 86805, 86806, 87188, 87423, 87424, 87425, 87426, 83566, 83399, 83400, 83401, 83402, 83349, 83309, 82771, 82702, 82703, 82671, 82672, 82673, 82674, 80803, 80804, 80805, 80806, 80807, 80808, 80809, 80810, 80811, 80812, 80813, 80814, 80761, 80762, 80763, 80764, 79806, 79807, 79808, 79803, 79804, 80372, 80373, 80374, 79393, 79394, 79395, 79396, 79397, 79398, 79399, 79400, 83656, 80444, 79800, 79801, 79802, 80983, 80985, 81118, 81641, 81872, 81873, 88351, 88352, 88353, 88354, 88355, 87930, 87879, 87880, 87881, 87882, 87883, 87577, 87514,},
		["Blood Trolls"] = {80251, 80477, 80478, 80479, 80480, 80793, 80794, 80795, 80796, 80834, 80835, 80836, 80852, 80851, 81287, 81808, 81983, 81984, 81978, 81986, 82290, 82366, 82367, 82368, 82394, 82615, 82616, 88652, 88361, 88169, 88121, 88037, 87956, 86961, 86743, 75858, 75859, 75860, 75861, 75862, 75863, 75864, 75865, 75882, 75883, 75884, 75885, 75891, 75974, 76706, 76707, 76708, 76764, 77998, 78172, 78198, 78278, 78280, 78856, 78858, 78859, 78860, 79169, 79170, 79171, 79172, 79173, 79174, 79499, 79500, 79501, 79502, 83308, 85003, 85116, 85156, },
	},
	["Miscellaneous"] = {
		["Objects"] = {69635, 69636, 69662, 69663, 62699, 62781, 62894, 62928, 63061, 63150, 63161, 63230, 63378, 63474, 63475, 63476, 63559, 63894, 63895, 63897, 29485, 29489, 29743, 29744, 29746, 38960, 39011, 39013, 39015, 39057, 39059, 39262, 39335, 55642, 75498, 75618, 75780, 66123, 66138, 66139, 66140, 66194, 66218, 66236, 66241, 66375, 66673, 66679, 66804, 66943, 67190, 67189, 67808, 68023, 68016, 76935, 47270, 47669, 47701, 47702, 47866, 48109, 69861, 69850, 69791, 69715, 69490, 69489, 69488, 69429, 69418, 69086, 64375, 64376, 59901, 59902, 59418, 59291, 59292, 59293, 59295, 59261, 59262, 58835, 58827, 58819, 57055, 36115, 36116, 36117, 35944, 35307, 35318, 35227, 35240, 34663, 78711, 78707, 78622, 76480, 76379, 76380, 76381, 76093, 76038, 76039, 76048, 74102, 74093, 73860, 73861, 73810, 73027, 72979, 72939, 72881, 72880, 72860, 72693, 72166, 72157, 72010, 71971, 71921, 71558, 71055, 71046, 71045, 71022, 70850, 70855, 27396, 27619, 27620, 27625, 27653, 27669, 27743, 27745, 28210, 28467, 28468, 28476, 28737, 28738, 34252, 34404, 34527, 17423, 16984, 16985, 16986, 16987, 16988, 16989, 16990, 16910, 26494, 26495, 26496, 26499, 26501, 26502, 26503, 26504, 26505, 87615, 87616, 87617, 87618, 84878, 84879, 84872, 84924, 85205, 85206, 85208, 85239, 85540, 85868, 85981, 74564, 71933},
	},
}

local animationOptions = {
	["Stand"] = 0,
	["Talk"] = 60,
	["Attack Stance"] = 26,
	["Channel Spell Directed"] = 124,
	["Channel Spell Omni"] = 125,
	["Stunned"] = 137,
	["Drowned"] = 132,
	["Crafting"] = 123,
	["Sleep"] = 71,
	["Dance"] = 69,
	["Meditate (PC)"] = 732,
	["Levitate (PC)"] = 1138,
	["Guard Pose (PC)"] = 1240,
	["Hold Object (PC)"] = 1330,
	["Dynamic Pose (Humans)"] = 1260,
	["Run"] = 5,
	["Walk"] = 4,
	["Dead"] = 6,
	["Handcuffed (Humans)"] = 1318,
	["Strangulated (PC)"] = 1180,
	["Drunk (Humans)"] = 1154,
	["Sit"] = 104,
	["Caster Stance (PC)"] = 860,
	["Ballroom Dance (Humans)"] = 211,
	["Kneel"] = 141,
	["Stealth"] = 120,
	["Cower"] = 225,
}

local AFFIX_RULES = {
	[1] = {text="The |cFFFFd100Unit Editor|r allows you to edit the visual elements of any unit frame, including the unit's model, animation, and custom |cFFFFd100Affixes|r. You can click any of the unit frames to open this menu."},
	[2] = {text="Use the |cFFFFd100Collections|r dropdown to select from a variety of model collections to sort the model list, or choose |cFFFFd100Default|r to see the full list of "..Me.unitList.." options. You can also create your own model collections to save your favourite selections for later.|n|nYou can click the |cFFFFd100R|r button to rename your currently selected model collection, or the |cFFFFd100X|r button to delete it.", relativeTo="DiceMasterAffixEditorFilter", offSet="16"},
	[3] = {text="Use the |cFFFFd100Animation|r dropdown to select from a list of animation options to preview in the list below. Some of these animations are not available to every model, specifically those listed as |cFFFFd100(PC)|r or |cFFFFd100(Humans)|r only.|n|nWhen you select a model from the list, the unit frame will use this animation.", relativeTo="DiceMasterAffixEditorAnimation", offSet="16"},
	[4] = {text="The |cFFFFd100Models List|r displays a preview of the available model options for the unit frame. You can scroll through this list of models and left click to select one for the unit frame. You can also right click any model to add or remove it from one of your custom collections.", relativeTo="DiceMasterAffixEditor"},
	[5] = {text="|cFFFFd100Affixes|r allow you to give a unit a custom buff, debuff, or trait that the rest of your group can see in the lower left corner of the unit frame. You can give |cFFFFd100Affixes|r a custom icon, name, description, and visual effect. You can also Load, Save, and Delete |cFFFFd100Affixes|r with the buttons at the bottom of the Unit Editor.|n|n|cFFFFd100Affixes|r remain hidden from the group by default until the |cFFFFd100Show Affix|r button is toggled on.", relativeTo="DiceMasterAffixEditorLoadButton"},
	[6] = {text="Select an |cFFFFd100Affix Icon|r from a library of icons which displays in the lower left corner of the unit frame.|n|nRemember: Affixes cannot be seen by the rest of your group if the |cFFFFd100Show Affix|r button is toggled off.", relativeTo="DiceMasterAffixEditorAffixIconButton"},
	[7] = {text="Choose an |cFFFFd100Affix Name|r to represent this Affix.|n|nRemember: Affixes cannot be seen by the rest of your group if the \"Show Affix\" button is toggled off.", relativeTo="DiceMasterAffixEditorAffixName"},
	[8] = {text="Choose an |cFFFFd100Affix Description|r that describes the effects of the Affix. This description should be brief but concise, as this field has a 600 character limit.|n|nRemember: Affixes cannot be seen by the rest of your group if the |cFFFFd100Show Affix|r button is toggled off.", relativeTo="DiceMasterAffixEditorAffixDesc"},
	[9] = {text="Click the |cFFFFd100Choose Effect...|r button to open the |cFFFFd100Affix Effects|r library, allowing you to scroll through a list of visual effects for the unit frame model. Similar to model collections, you can also create, rename, and delete custom effects collections to store for later use.", relativeTo="DiceMasterAffixEditorAffixEffect"},
	[10] = {text="Click the |cFFFFd100Show/Hide Affix|r button to toggle the Affix's visibility for your group. It can be helpful to keep Affixes hidden while editing them to avoid confusion if changes are being made.|n|nAll unit frames are hidden by default.", relativeTo="DiceMasterAffixEditorAffixToggle"},
}

function Me.AffixEditorDropDown_OnClick(self, arg1, arg2, checked)
	UIDropDownMenu_SetText(DiceMasterAffixEditorFilter, self:GetText())
	Me.AffixEditor_FilterChanged( arg1 )
	if arg2 == "collection" then
		DiceMasterAffixEditorRenameButton:Enable()
		DiceMasterAffixEditorDeleteButton:Enable()
	else
		DiceMasterAffixEditorRenameButton:Disable()
		DiceMasterAffixEditorDeleteButton:Disable()
	end
end

function Me.AnimationPickerDropDown_OnClick(self, arg1, arg2, checked)
	UIDropDownMenu_SetText(DiceMasterAffixEditor.animation, self:GetText())
	Me.unitAnim = arg1
	for k,v in ipairs( DiceMasterAffixEditor.icons ) do
		v:SetAnimation(Me.unitAnim)
	end
end

function Me.MyCollectionDropDown_OnClick(self, arg1, arg2, checked)
	local model = arg2:GetDisplayInfo()
	if arg1 == "new" then
		StaticPopup_Show("DICEMASTER4_MYCOLLECTION", nil, nil, model)
	else
		for i=1,#DiceMaster4UF_Saved.MyCollection[arg1] do
			if DiceMaster4UF_Saved.MyCollection[arg1][i]==model then
				return
			end
		end
		tinsert(DiceMaster4UF_Saved.MyCollection[arg1], model)
		Me.AffixEditor_RefreshGrid()
	end
end

function Me.MyCollectionDropDown_Remove(self, arg1, arg2)
	tremove(DiceMaster4UF_Saved.MyCollection[arg1], arg2)
	Me.AffixEditor_RefreshGrid()
end

function Me.AffixEditorDropDown_OnLoad(frame, level, menuList)
	local info = UIDropDownMenu_CreateInfo()

	 if level == 1 then
	  -- Outermost menu level
	  info.text = "Default"
	  info.arg1 = "default"
	  info.hasArrow = nil
	  info.checked = filteredList == nil;
	  info.notCheckable = false;
	  info.func = Me.AffixEditorDropDown_OnClick;
	  UIDropDownMenu_AddButton(info)
	  info.func = nil;
	  info.keepShownOnClick = true;
	  info.notCheckable = true;
	  info.text = "My Models"
	  info.hasArrow = true;
	  info.notCheckable = true;
	  info.menuList = "My Collections"
	  UIDropDownMenu_AddButton(info)
	  info.text = "Races"
	  info.hasArrow = true;
	  info.notCheckable = true;
	  info.menuList = "Races"
	  UIDropDownMenu_AddButton(info)
	  info.text = "Creatures"
	  info.hasArrow = true;
	  info.notCheckable = true;
	  info.menuList = "Creatures"
	  UIDropDownMenu_AddButton(info)
	  info.text = "Miscellaneous"
	  info.hasArrow = true;
	  info.notCheckable = true;
	  info.menuList = "Miscellaneous"
	  UIDropDownMenu_AddButton(info)
	  
	  info.keepShownOnClick = false;
	  info.notCheckable = false;

	  elseif menuList == "My Collections" then
	  -- Show the "My Collections" sub-menu
		if DiceMaster4UF_Saved.MyCollection then
			for k,v in pairs(DiceMaster4UF_Saved.MyCollection) do
			   info.text = k
			   info.arg1 = v
			   info.arg2 = "collection";
			   info.hasArrow = true;
			   info.menuList = k
			   info.checked = filteredList == v;
			   info.func = Me.AffixEditorDropDown_OnClick;
			   UIDropDownMenu_AddButton(info, level)
			end
		end
	 elseif menuList == "Races" then
	  -- Show the "Races" sub-menu
	  for k,v in pairs(filterOptions["Races"]) do
	   info.text = k
	   info.arg1 = v
	   info.checked = filteredList == v;
	   info.func = Me.AffixEditorDropDown_OnClick;
	   UIDropDownMenu_AddButton(info, level)
	  end
	 elseif menuList == "Creatures" then
	  -- Show the "Creatures" sub-menu
	  for k,v in pairs(filterOptions["Creatures"]) do
	   info.text = k
	   info.arg1 = v
	   info.checked = filteredList == v;
	   info.func = Me.AffixEditorDropDown_OnClick;
	   UIDropDownMenu_AddButton(info, level)
	  end
	 elseif menuList == "Miscellaneous" then
	  -- Show the "Misc" sub-menu
	  for k,v in pairs(filterOptions["Miscellaneous"]) do
	   info.text = k
	   info.arg1 = v
	   info.checked = filteredList == v;
	   info.func = Me.AffixEditorDropDown_OnClick;
	   UIDropDownMenu_AddButton(info, level)
	  end
	 else
		if DiceMaster4UF_Saved.MyCollection then
			for k,v in pairs(DiceMaster4UF_Saved.MyCollection) do
			   if menuList == k then
				   info.text = "|cFF00FF00Add Model..."
				   info.notCheckable = true;
				   info.func = function() StaticPopup_Show("DICEMASTER4_ADDTOCOLLECTION", nil, nil, k) end;
				   UIDropDownMenu_AddButton(info, level)
				end
			end
		end
	end
end

function Me.AnimationPickerDropDown_OnLoad(frame, level, menuList)
	local info = UIDropDownMenu_CreateInfo()

	  for k,v in pairs(animationOptions) do
	   info.text = k
	   info.arg1 = v
	   info.checked = Me.unitAnim == v;
	   info.notCheckable = false;
	   info.func = Me.AnimationPickerDropDown_OnClick;
	   UIDropDownMenu_AddButton(info, level)
	  end
end

function Me.MyCollectionDropDown_OnLoad(frame, level, menuList)
	local info = UIDropDownMenu_CreateInfo()
	info.text = "|cFFffd100Add To..."
	info.notClickable = true;
	info.notCheckable = true;
	UIDropDownMenu_AddButton(info, level)
	info.text = "|cFF00FF00New..."
	info.arg1 = "new";
	info.arg2 = frame;
	info.disabled = false;
	info.notClickable = false;
    info.notCheckable = true;
    info.func = Me.MyCollectionDropDown_OnClick;
    UIDropDownMenu_AddButton(info, level)
	
	if DiceMaster4UF_Saved.MyCollection then
	  for k,v in pairs(DiceMaster4UF_Saved.MyCollection) do
	   info.text = k;
	   info.arg1 = k;
	   info.arg2 = frame;
	   info.disabled = false;
	   info.notCheckable = true;
	   	for i=1,#v do
			if frame:GetDisplayInfo()==v[i] then
				info.disabled = true;
			end
		end
	   info.func = Me.MyCollectionDropDown_OnClick;
	   UIDropDownMenu_AddButton(info, level)
	  end
	
	info.text = "|cFFffd100Remove From..."
	info.notClickable = true;
	info.notCheckable = true;
	UIDropDownMenu_AddButton(info, level)
	for k,v in pairs(DiceMaster4UF_Saved.MyCollection) do
	   	for i=1,#v do
			if frame:GetDisplayInfo()==v[i] then
			   info.text = k;
			   info.arg1 = k;
			   info.arg2 = i;
			   info.notClickable = false;
			   info.disabled = false;
			   info.notCheckable = true;
			   info.func = Me.MyCollectionDropDown_Remove;
			   UIDropDownMenu_AddButton(info, level)
			end
		end
	  end
	end
end

StaticPopupDialogs["DICEMASTER4_MYCOLLECTION"] = {
  text = "Enter a name for this model collection:",
  button1 = "Accept",
  button2 = "Cancel",
  OnShow = function (self, data)
    self.editBox:SetText("Collection 1")
	self.editBox:HighlightText()
  end,
  OnAccept = function (self, data, data2)
    local text = self.editBox:GetText()
	if DiceMaster4UF_Saved.MyCollection[text] then
		UIErrorsFrame:AddMessage( text.." already exists.", 1.0, 0.0, 0.0, 53, 5 );
	elseif text~= "" then
		DiceMaster4UF_Saved.MyCollection[text] = {}
		tinsert(DiceMaster4UF_Saved.MyCollection[text], data)
		print("|cFFFFFF00\""..text.."\" created.");
		Me.AffixEditor_RefreshGrid()
	else
		UIErrorsFrame:AddMessage( "Invalid name.", 1.0, 0.0, 0.0, 53, 5 );
	end
  end,
  hasEditBox = true,
  timeout = 0,
  whileDead = true,
  hideOnEscape = true,
  preferredIndex = 3,
}

StaticPopupDialogs["DICEMASTER4_RENAMECOLLECTION"] = {
  text = "Enter a new name for this model collection:",
  button1 = "Accept",
  button2 = "Cancel",
  OnShow = function (self, data)
    self.editBox:SetText(data)
	self.editBox:HighlightText()
  end,
  OnAccept = function (self, data, data2)
    local text = self.editBox:GetText()
	if DiceMaster4UF_Saved.MyCollection[text] then
		UIErrorsFrame:AddMessage( text.." already exists.", 1.0, 0.0, 0.0, 53, 5 );
	elseif text~= "" then
		DiceMaster4UF_Saved.MyCollection[text] = DiceMaster4UF_Saved.MyCollection[data]
		DiceMaster4UF_Saved.MyCollection[data] = nil
		print("|cFFFFFF00\""..data.."\" renamed to \""..text..".\"");
		UIDropDownMenu_SetText(DiceMasterAffixEditorFilter, text)
		Me.AffixEditor_RefreshGrid()
	else
		UIErrorsFrame:AddMessage( "Invalid name.", 1.0, 0.0, 0.0, 53, 5 );
	end
  end,
  hasEditBox = true,
  timeout = 0,
  whileDead = true,
  hideOnEscape = true,
  preferredIndex = 3,
}

StaticPopupDialogs["DICEMASTER4_DELETECOLLECTION"] = {
  text = "Are you sure you want to delete this model collection?",
  button1 = "Yes",
  button2 = "No",
  OnAccept = function (self, data, data2)
	DiceMaster4UF_Saved.MyCollection[data] = nil
	print("|cFFFFFF00\""..data.."\" deleted.");
	UIDropDownMenu_SetText(DiceMasterAffixEditorFilter, "Default")
	Me.AffixEditor_FilterChanged( "default" )
	Me.AffixEditor_RefreshGrid()
	DiceMasterAffixEditorRenameButton:Disable()
	DiceMasterAffixEditorDeleteButton:Disable()
  end,
  timeout = 0,
  whileDead = true,
  hideOnEscape = true,
  preferredIndex = 3,
}

StaticPopupDialogs["DICEMASTER4_ADDTOCOLLECTION"] = {
  text = "Enter the displayID for the model:",
  button1 = "Accept",
  button2 = "Cancel",
  OnShow = function (self, data)
	self.editBox:SetNumeric()
  end,
  OnAccept = function (self, data)
    local text = tonumber(self.editBox:GetText())
	if text~= nil and (text <= Me.unitList) then
		tinsert(DiceMaster4UF_Saved.MyCollection[data], text)
		print("|cFFFFFF00"..text.." added to \""..data..".\"");
		Me.AffixEditor_RefreshGrid()
	else
		UIErrorsFrame:AddMessage( "Invalid model.", 1.0, 0.0, 0.0, 53, 5 );
	end
  end,
  hasEditBox = true,
  timeout = 0,
  whileDead = true,
  hideOnEscape = true,
  preferredIndex = 3,
}

StaticPopupDialogs["DICEMASTER4_OVERWRITEAFFIX"] = {
  text = "An affix with this name already exists. Are you sure you want to overwrite it?",
  button1 = "Yes",
  button2 = "No",
  OnAccept = function (self)
	Me.AffixEditor_SaveAffix()
  end,
  timeout = 0,
  whileDead = true,
  hideOnEscape = true,
  preferredIndex = 3,
}

StaticPopupDialogs["DICEMASTER4_DELETEAFFIX"] = {
  text = "Are you sure you want to delete this affix?",
  button1 = "Yes",
  button2 = "No",
  OnAccept = function (self, data)
	Me.AffixEditor_DeleteAffix( data )
  end,
  timeout = 0,
  whileDead = true,
  hideOnEscape = true,
  preferredIndex = 3,
}

-------------------------------------------------------------------------------
-- When one of the icon buttons are clicked.
--
function Me.AffixEditorButton_OnClick( self, button )

	local value = math.floor(self:GetParent().scroller:GetValue())*4 + self.pickerIndex
	if filteredList then value = filteredList[value] end
	
	-- Apply the model to the edited frame and close the picker. ) 
		
	if button=="LeftButton" and Me.IsLeader( true ) then
		if Me.UnitEditing then
			Me.UnitEditing:ClearModel()
			Me.UnitEditing:SetDisplayInfo(value)
			Me.UnitEditing.animation = Me.unitAnim
			Me.UnitEditing:SetAnimation(Me.unitAnim)
			Me.UnitEditing:SetSpellVisualKit(Me.UnitEditing.spellvisualkit or 0)
			Me.UnitEditing:SetPortraitZoom(0)
			Me.UnitEditing:SetPortraitZoom(0.6)
			PlaySound(83)
			
			Me.UnitEditing.checked = value;
			self.check:Show()
			
			Me.UnitEditing.scrollposition = DiceMasterAffixEditor.selectorFrame.scroller:GetValue()
			Me.UpdateUnitFrames()
			Me.AffixEditor_RefreshGrid()
			Me.UnitPicker_RefreshGrid()
		end
	-- Right click to add/remove from our list of favourites.
	
	elseif button=="RightButton" then
		local height = self:GetHeight()
		ToggleDropDownMenu(1, nil, self, "cursor", 0, 0)
		self:SetHeight(height)
	end
end

-------------------------------------------------------------------------------
-- OnEnter handler, to magnify the icon and show the texture path.
--
function Me.AffixEditorButton_ShowTooltip( self )
	GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
	
	local value = math.floor(self:GetParent().scroller:GetValue())*4 + self.pickerIndex
	if filteredList then value = filteredList[value] end
    GameTooltip:AddLine( "ID: " .. value, 1, 1, 1, true )
    GameTooltip:Show()
end

-------------------------------------------------------------------------------
-- When the mousewheel is used on the icon map.
--
function Me.AffixEditor_MouseScroll( delta )

	local a = DiceMasterAffixEditor.selectorFrame.scroller:GetValue() - delta
	-- todo: do we need to clamp?
	DiceMasterAffixEditor.selectorFrame.scroller:SetValue( a )
end
   
-------------------------------------------------------------------------------
-- When the scrollbar's value is changed.
--
function Me.AffixEditor_ScrollChanged( value )
	
	-- Our "step" is 4 icons, which is one line.
	startOffset = math.floor(value) * 4
	Me.AffixEditor_RefreshGrid()
end

-------------------------------------------------------------------------------
-- Set the textures of the icon grid from the icons in the list at the
-- current offset.
--
function Me.AffixEditor_RefreshGrid()
	local list = filteredList or Me.unitList
	for k,v in ipairs( DiceMasterAffixEditor.icons ) do
		UIDropDownMenu_Initialize( DiceMasterAffixEditorFilter, DiceMaster4.AffixEditorDropDown_OnLoad )
		UIDropDownMenu_Initialize( v, DiceMaster4.MyCollectionDropDown_OnLoad )
		v:SetHeight(97)
		
		local tex = startOffset + k
		if filteredList then tex = list[startOffset + k] end
		if tex then
		
			v:Show()
			v:ClearModel()
			v:SetDisplayInfo(tex)
			v:SetAnimation(Me.unitAnim or 0)
			v:SetPortraitZoom(0.6)
			
			if Me.UnitEditing.checked == tex then
				v.check:Show()
			else
				v.check:Hide()
			end
			
		else
			v:Hide()
		end
	end
end

-------------------------------------------------------------------------------
-- Called when the user types into the search box.
--
function Me.AffixEditor_FilterChanged( list )
	if list and list~="default" then
		filteredList = list
	else
		filteredList = nil
	end
	Me.AffixEditor_RefreshScroll( true )
end

-------------------------------------------------------------------------------
-- When we change the size of the list, update the scroll bar range.
--
-- @param reset Reset the scroll bar to the beginning.
--
function Me.AffixEditor_RefreshScroll( reset, value )
	local list = Me.unitList 
	if filteredList then list = #filteredList end
	local max = math.floor((list) / 4)
	if max < 0 then max = 0 end
	DiceMasterAffixEditor.selectorFrame.scroller:SetMinMaxValues( 0, max )
	
	if reset then
		DiceMasterAffixEditor.selectorFrame.scroller:SetValue( 0 )
	elseif value then
		DiceMasterAffixEditor.selectorFrame.scroller:SetValue( math.floor(value) )
	end
	-- todo: does scroller auto clamp value?
	
	Me.AffixEditor_ScrollChanged( DiceMasterAffixEditor.selectorFrame.scroller:GetValue() )
end
   

-------------------------------------------------------------------------------
-- Handler for when the tooltip has been updated by any change.
--
function Me.AffixEditor_UpdateTooltip()
	if Me.AffixEditing then
		DiceMaster4.SetupTooltip( Me.AffixEditing.affixIcon, Me.AffixEditing.affix.icon, Me.AffixEditing.affix.name, nil, nil, nil, Me.AffixEditing.affix.desc )
	end
end

function Me.AffixEditor_ClearTooltip()
	if Me.AffixEditing then
		Me.AffixEditing.affixIcon:SetNormalTexture("")
		DiceMaster4.SetupTooltip( Me.AffixEditing.affixIcon, nil, "Monster Affix", nil, nil, nil, "A special effect or ability used by this unit.|n|cFF707070<Left Click to Edit>|n<Right Click to Toggle>" )
	end
end

-------------------------------------------------------------------------------
-- Set the texture of the currently edited affix.
--
-- @param texture Path to texture file to use for the current affix.
--
function Me.AffixEditor_SelectIcon( texture )
	if Me.AffixEditing then
		Me.AffixEditing.affix.icon = texture or "Interface/Icons/inv_misc_questionmark"
		DiceMasterAffixEditorAffixIconButton:SetNormalTexture( texture )
		Me.AffixEditing.affixIcon:SetNormalTexture( texture )
		Me.AffixEditing.affixIcon:GetParent().affix.Shown = true
	end
	Me.AffixEditor_UpdateTooltip()
	Me.UpdateUnitFrames()
end

function Me.AffixEditor_SaveAffix()
	local icon = Me.AffixEditing.affix.icon
	local name = DiceMasterAffixEditorAffixName:GetText()
	local desc = DiceMasterAffixEditorAffixDesc.EditBox:GetText()
	local effect = Me.UnitEditing.spellvisualkit or nil
	
	if name~="" then
		DiceMaster4UF_Saved.FavouriteAffixes[name] = {}
		DiceMaster4UF_Saved.FavouriteAffixes[name].icon = icon
		DiceMaster4UF_Saved.FavouriteAffixes[name].name = name
		DiceMaster4UF_Saved.FavouriteAffixes[name].desc = desc
		DiceMaster4UF_Saved.FavouriteAffixes[name].effect = effect
		print("|T"..icon..":16|t "..name.."|cFFFFFF00 saved.");
	end
end

function Me.AffixEditor_DeleteAffix( affix )
	Me.AffixEditing.affixIcon:SetNormalTexture( "Interface/Icons/inv_misc_questionmark" )
	DiceMasterAffixEditorAffixIconButton:SetNormalTexture("Interface/Icons/inv_misc_questionmark")
	DiceMasterAffixEditorAffixName:SetText("")
	DiceMasterAffixEditorAffixDesc.EditBox:SetText("")
	if DiceMaster4UF_Saved.FavouriteAffixes[affix] then
		print("|T"..DiceMaster4UF_Saved.FavouriteAffixes[affix].icon..":16|t "..affix.."|cFFFFFF00 deleted.");
		DiceMaster4UF_Saved.FavouriteAffixes[affix] = nil;
	end
	Me.AffixEditor_ClearTooltip()
	Me.UnitPicker_ResetEffect()
end

function Me.AffixEditor_ToggleAffix( self )
	if Me.AffixEditing.affixIcon:IsShown() then
		Me.AffixEditing.affixIcon:Hide()
		Me.AffixEditing.affix.Shown = false
		self:SetText("Show Affix")
		DiceMaster4.SetupTooltip( self, nil,  "|cFFFFD100Click to make this affix visible to the rest of your group.")
	else
		Me.AffixEditing.affixIcon:Show()
		Me.AffixEditing.affix.Shown = true
		self:SetText("Hide Affix")
		DiceMaster4.SetupTooltip( self, nil,  "|cFFFFD100Click to hide this affix from the rest of your group.")
	end
	DiceMaster4.UpdateUnitFrames()
end

-------------------------------------------------------------------------------
-- Handler for when the name editor loses focus.
--
function Me.AffixEditor_SaveName()
	if Me.AffixEditing then
		Me.AffixEditing.affix.name = DiceMasterAffixEditorAffixName:GetText()
	end
	Me.AffixEditor_UpdateTooltip()
	Me.UpdateUnitFrames()
end

-------------------------------------------------------------------------------
-- Handler for when the text editor loses focus.
--
function Me.AffixEditor_SaveDescription()
	if Me.AffixEditing then
		Me.AffixEditing.affix.desc = DiceMasterAffixEditorAffixDesc.EditBox:GetText()
	end
	Me.AffixEditor_UpdateTooltip()
	Me.UpdateUnitFrames()
end

-------------------------------------------------------------------------------
-- Load the help tooltip text.
--
function Me.AffixEditor_HelpTooltipLoad()
	local tooltip = DiceMasterAffixEditorHelpTooltip

	tooltip.Text:SetText( AFFIX_RULES[tooltip.rulesid].text)
	tooltip:SetHeight(tooltip.Text:GetHeight()+60);
	if AFFIX_RULES[tooltip.rulesid].relativeTo then
		DiceMasterAffixEditorHelpArrow:SetPoint("RIGHT", AFFIX_RULES[tooltip.rulesid].relativeTo, "LEFT", AFFIX_RULES[tooltip.rulesid].offSet or 0, 0)
		DiceMasterAffixEditorHelpArrow:Show()
	else
		DiceMasterAffixEditorHelpArrow:Hide()
	end
end

-------------------------------------------------------------------------------
-- Change the help tooltip page.
--
function Me.AffixEditor_ChangePage( self, delta )
	local tooltip = DiceMasterAffixEditorHelpTooltip
	tooltip.rulesid = tooltip.rulesid + 1*delta
	tooltip.Text:SetText(AFFIX_RULES[tooltip.rulesid].text)
	tooltip:SetHeight(tooltip.Text:GetHeight()+60);
	if tooltip.rulesid == 1 then
		tooltip.PrevPageButton:Disable()
	elseif tooltip.rulesid == #AFFIX_RULES then
		tooltip.NextPageButton:Disable()
	else
		tooltip.PrevPageButton:Enable()
		tooltip.NextPageButton:Enable()
	end
	if AFFIX_RULES[tooltip.rulesid].relativeTo then
		DiceMasterAffixEditorHelpArrow:SetPoint("RIGHT", AFFIX_RULES[tooltip.rulesid].relativeTo, "LEFT", AFFIX_RULES[tooltip.rulesid].offSet or 0, 0)
		DiceMasterAffixEditorHelpArrow:Show()
	else
		DiceMasterAffixEditorHelpArrow:Hide()
	end
end

-------------------------------------------------------------------------------
-- Dropdown handlers for the load affixes menu.
--
function Me.AffixEditorLoadDropDown_OnClick(self, arg1, arg2, checked)
	local icon = arg1.icon
	local name = arg1.name
	local desc = arg1.desc
	local effect = arg1.effect or nil
	DiceMasterAffixEditorAffixIconButton:SetNormalTexture(icon)
	DiceMasterAffixEditorAffixName:SetText(name)
	DiceMasterAffixEditorAffixDesc.EditBox:SetText(desc)
	Me.AffixEditing.affix.icon = icon or "Interface/Icons/inv_misc_questionmark"
	Me.AffixEditing.affixIcon:SetNormalTexture( icon )
	Me.AffixEditing.affixIcon:GetParent().affix.Shown = true
	if effect then
		Me.UnitEditing:SetDisplayInfo(Me.UnitEditing:GetDisplayInfo())
		Me.UnitEditing.spellvisualkit = effect
		Me.UnitEditing:SetAnimation(Me.UnitEditing.animation)
		Me.UnitEditing:SetSpellVisualKit(effect)
		Me.UnitEditing:SetPortraitZoom(0)
		Me.UnitEditing:SetPortraitZoom(0.6)
	end
	Me.AffixEditor_SaveName()
	Me.AffixEditor_SaveDescription()
end

function Me.AffixEditorLoadDropDown_OnLoad()
	for k,v in pairs(DiceMaster4UF_Saved.FavouriteAffixes) do
       local info      = UIDropDownMenu_CreateInfo();
	   info.checked	   = false;
	   info.icon	   = v.icon or "Interface/Icons/inv_misc_questionmark";
	   info.tooltipTitle = k;
	   info.tooltipText = v.desc;
	   info.tooltipOnButton = true;
       info.text       = k;
       info.value      = 1;
	   info.notCheckable = true;
	   info.arg1	   = v;
       info.func       = Me.AffixEditorLoadDropDown_OnClick;
       UIDropDownMenu_AddButton(info); 
	end
end
    
-------------------------------------------------------------------------------
-- Close the affix editor window. Use this instead of a direct Hide()
--
function Me.AffixEditor_Close()
	DiceMasterAffixEditor.scrollposition = DiceMasterAffixEditor.selectorFrame.scroller:GetValue()
	Me.UnitEditing = nil;
	DiceMasterAffixEditorAffixName:ClearFocus()
	DiceMasterAffixEditorAffixDesc.EditBox:ClearFocus()
	Me.AffixEditing = nil;
	PlaySound(680)
	DiceMasterAffixEditor:Hide()
end
    
-------------------------------------------------------------------------------
-- Open the affix editor window.
--
function Me.AffixEditor_Open( frame )
	if DiceMasterAffixEditor:IsShown() then
		Me.AffixEditor_Close()
	end
	if DiceMasterUnitPicker:IsShown() then
		Me.UnitPicker_Close()
	end
	DiceMaster4UF_Saved.FavouriteUnits = DiceMaster4UF_Saved.FavouriteUnits or {}
	
	DiceMaster4UF_Saved.MyCollection = DiceMaster4UF_Saved.MyCollection or {}
	
	UIDropDownMenu_Initialize( DiceMasterAffixEditorFilter, DiceMaster4.AffixEditorDropDown_OnLoad )
	if DiceMasterAffixEditorFilterText:GetText() == nil then
		UIDropDownMenu_SetText(DiceMasterAffixEditorFilter, "Default") 
	end
	UIDropDownMenu_SetWidth(DiceMasterAffixEditorFilter, 110, 5)
	
	Me.UnitEditing = frame or nil;

	if Me.UnitEditing.scrollposition then
		Me.AffixEditor_RefreshScroll( nil, Me.UnitEditing.scrollposition )
	elseif DiceMasterAffixEditor.scrollposition then
		Me.AffixEditor_RefreshScroll( nil, DiceMasterAffixEditor.scrollposition )
	else
		Me.AffixEditor_RefreshScroll( true )
	end 
	if frame.affix.name then
		DiceMasterAffixEditorAffixIconButton:SetNormalTexture(frame.affix.icon)
		DiceMasterAffixEditorAffixName:SetText(frame.affix.name)
		DiceMasterAffixEditorAffixDesc.EditBox:SetText(frame.affix.desc)
	end
	DiceMaster4UF_Saved.FavouriteAffixes = DiceMaster4UF_Saved.FavouriteAffixes or {}
	Me.AffixEditing = frame or nil;
	PlaySound(679)
	DiceMasterAffixEditor:Show()
end